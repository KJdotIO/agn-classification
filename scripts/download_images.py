"""
Downloads FITS image cutouts from the Legacy Survey DR8 service.

This script takes a CSV file (generated by load_catalogs.py) containing a list
of target galaxies with their coordinates (RA, Dec) and labels (AGN/non-AGN).
It downloads a specified number of images per class, saving them into 
organized subdirectories.

Key functionalities:
- Sets up output directories for AGN and non-AGN FITS images.
- Loads the target list from the CSV.
- Samples a specified number of AGN and non-AGN targets.
- Constructs download URLs for the Legacy Survey FITS cutout service.
- Downloads images, skips existing ones, and handles potential errors gracefully.
- Provides a summary of the download process.
"""
import pandas as pd
import requests
import os
import time

# --- Configuration ---
# Input file path for the target galaxy list
TARGET_LIST_PATH = '../data/final_galaxy_targets.csv'

# Base directory for storing downloaded FITS images
FITS_BASE_DIR = '../data/fits_images'

# Subdirectories for AGN and non-AGN images
AGN_DIR = os.path.join(FITS_BASE_DIR, 'agn')
NON_AGN_DIR = os.path.join(FITS_BASE_DIR, 'non_agn')

# URL pattern for downloading FITS cutouts
# (RA, Dec, pixscale, size, bands will be formatted in)
DOWNLOAD_URL_PATTERN = 'https://www.legacysurvey.org/viewer/fits-cutout?ra={RA}&dec={DEC}&layer=dr8&pixscale=0.262&size=160&bands=grz'

# Number of images to download per class for this initial run
NUM_TO_DOWNLOAD_PER_CLASS = 1000 

# Delay between downloads in seconds (to be polite to the server)
DOWNLOAD_DELAY = 0

# --- Setup Output Directories ---
def setup_directories():
    """Ensures that the necessary output directories for FITS images exist."""
    print(f"Ensuring output directory exists: {FITS_BASE_DIR}")
    os.makedirs(FITS_BASE_DIR, exist_ok=True)
    print(f"Ensuring output directory exists: {AGN_DIR}")
    os.makedirs(AGN_DIR, exist_ok=True)
    print(f"Ensuring output directory exists: {NON_AGN_DIR}")
    os.makedirs(NON_AGN_DIR, exist_ok=True)
    print("Output directories are ready.")

def load_target_list(file_path):
    """Loads the target galaxy list from a CSV file."""
    try:
        print(f"Loading target list from: {file_path}")
        target_df = pd.read_csv(file_path)
        print(f"Successfully loaded target list. Number of targets: {len(target_df)}")
        if target_df.empty:
            print("Warning: The target list is empty. No images will be downloaded.")
            # exit() # Optionally exit if empty
        return target_df
    except FileNotFoundError:
        print(f"Error: Target list file not found at {file_path}. Please ensure load_catalogs.py has been run successfully.")
        exit() # Exit if file not found, as we can't proceed
    except Exception as e:
        print(f"Error loading target list: {e}")
        exit() # Exit on other critical loading errors

def select_download_sample(target_df, num_per_class):
    """Selects a sample of AGN and non-AGN targets for download."""
    if target_df.empty:
        return pd.DataFrame()

    agn_targets = target_df[target_df['label'] == 1].head(num_per_class)
    non_agn_targets = target_df[target_df['label'] == 0].head(num_per_class)
    
    print(f"Selected {len(agn_targets)} AGN and {len(non_agn_targets)} non-AGN targets for download.")
    return pd.concat([agn_targets, non_agn_targets], ignore_index=True)

def download_image(row, url_pattern, delay):
    """Downloads a single FITS image for a given target row."""
    ra = row['RA']
    dec = row['DEC']
    specobjid = str(row['SPECOBJID'])
    label = row['label']
    output_dir = AGN_DIR if label == 1 else NON_AGN_DIR
    output_filepath = os.path.join(output_dir, f"{specobjid}.fits")

    if os.path.exists(output_filepath):
        # print(f"Exists: {output_filepath}. Skipping.") # Less verbose for existing files
        return 'skipped'

    download_url = url_pattern.format(RA=ra, DEC=dec)
    # print(f"Downloading: SPECOBJID {specobjid} from {download_url}") # A bit noisy for many files
    
    try:
        response = requests.get(download_url, timeout=30)
        response.raise_for_status()
        with open(output_filepath, 'wb') as f:
            f.write(response.content)
        # print(f"Success: {output_filepath}")
        if delay > 0:
            time.sleep(delay)
        return 'downloaded'
    except requests.exceptions.HTTPError as http_err:
        print(f"HTTP error for {specobjid}: {http_err}")
    except requests.exceptions.RequestException as req_err:
        print(f"Request error for {specobjid}: {req_err}")
    except IOError as io_err:
        print(f"IOError saving {specobjid}: {io_err}")
    except Exception as e:
        print(f"Unexpected error for {specobjid}: {e}")
    return 'failed'

def main():
    """Main script execution flow."""
    print(f"--- Starting Image Downloader --- ")
    print(f"Attempting to download {NUM_TO_DOWNLOAD_PER_CLASS} images per class.")
    
    setup_directories()
    
    target_df = load_target_list(TARGET_LIST_PATH)
    if target_df.empty:
        print("Cannot proceed without a target list. Exiting.")
        return

    download_sample_df = select_download_sample(target_df, NUM_TO_DOWNLOAD_PER_CLASS)
    if download_sample_df.empty:
        print("No targets selected for download. Exiting.")
        return
    
    print(f"\n--- Commencing Download of {len(download_sample_df)} Selected Images ---")
    results = {'downloaded': 0, 'skipped': 0, 'failed': 0}
    
    # Using a loop that can be adapted for tqdm if desired for very large downloads
    for index, row in download_sample_df.iterrows():
        # Simple progress indicator for console
        print(f"Processing {index + 1}/{len(download_sample_df)}: SPECOBJID {row['SPECOBJID']}...", end=' ')
        status = download_image(row, DOWNLOAD_URL_PATTERN, DOWNLOAD_DELAY)
        results[status] += 1
        print(f"Status: {status}")
            
    print("\n--- Download Summary ---")
    print(f"Successfully downloaded: {results['downloaded']}")
    print(f"Skipped (already exist): {results['skipped']}")
    print(f"Failed downloads: {results['failed']}")
    print(f"Total targets processed: {len(download_sample_df)}")
    print("\n--- Image download process finished. ---")

if __name__ == "__main__":
    main()
